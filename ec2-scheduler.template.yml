AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Scheduler: This template installs an opt-in version of the EC2 Scheduler for automatically starting and stopping EC2 instances.'

Parameters:
  CustomTagName:
    Description: Custom Tag Name
    Default: 'scheduler:ec2-startstop'
    Type: String

  DefaultDaysActive:
    Description: Enter all, weekdays, or any combination of days (mon, tue, wed, thu, fri, sat, or sun) comma separated
    Default: all
    Type: String

  DefaultStartTime:
    Description: 'Default Start Time (UTC, 24-hour format)'
    Default: '0800'
    Type: String

  DefaultStopTime:
    Description: 'Default Start Time (UTC, 24-hour format)'
    Default: '1800'
    Type: String

  Schedule:
    Description: Schedule for CWE Scheduled Expression
    AllowedValues:
      - 1minute
      - 5minutes
      - 15minutes
      - 30minutes
      - 1hour
    Default: 5minutes
    Type: String

  CloudWatchMetrics:
    Description: Create CloudWatch Custom Metric
    AllowedValues:
      - Enabled
      - Disabled
    Default: Enabled
    Type: String

Mappings:
  Schedule:
    Time:
      15minutes: 'cron(0/15 * * * ? *)'
      1hour: 'cron(0 * * * ? *)'
      1minute: 'cron(0/1 * * * ? *)'
      30minutes: 'cron(0/30 * * * ? *)'
      5minutes: 'cron(0/5 * * * ? *)'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Tag Configuration
        Parameters:
          - CustomTagName
      - Label:
          default: CloudWatch Event Schedule Configuration
        Parameters:
          - Schedule
      - Label:
          default: Default Value Configuration
        Parameters:
          - DefaultStartTime
          - DefaultStopTime
          - DefaultDaysActive
      - Label:
          default: CloudWatch Custom Metric
        Parameters:
          - CloudWatchMetrics

Resources:
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ec2SchedulerOptIn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt [ScheduledRule, Arn]

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to trigger EC2Scheduler function on a schedule
      ScheduleExpression:
        Fn::FindInMap:
        - Schedule
        - Time
        - !Ref Schedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt [ec2SchedulerOptIn, Arn]
          Id: TargetFunctionV1

  ec2SchedulerOptIn:
    Type: AWS::Lambda::Function
    Properties:
      Description: EC2 Scheduler Lambda function for automatically starting and stopping EC2 instances.
      Handler: ec2-scheduler.lambda_handler
      Role: !GetAtt [ec2SchedulerRole, Arn]
      Runtime: python2.7
      Timeout: '300'
      Code:
        ZipFile: |
          import boto3
          import datetime
          import json
          from urllib2 import Request
          from urllib2 import urlopen
          from collections import Counter

          def putCloudWatchMetric(region, instance_id, instance_state):

              cw = boto3.client('cloudwatch')

              cw.put_metric_data(
                  Namespace='EC2Scheduler',
                  MetricData=[{
                      'MetricName': instance_id,
                      'Value': instance_state,

                      'Unit': 'Count',
                      'Dimensions': [
                          {
                              'Name': 'Region',
                              'Value': region
                          }
                      ]
                  }]

              )

          def lambda_handler(event, context):

              print "Running EC2 Scheduler"

              ec2 = boto3.client('ec2')
              cf = boto3.client('cloudformation')
              outputs = {}
              stack_name = context.invoked_function_arn.split(':')[6].rsplit('-', 2)[0]
              response = cf.describe_stacks(StackName=stack_name)
              for e in response['Stacks'][0]['Outputs']:
                  outputs[e['OutputKey']] = e['OutputValue']

              awsRegions = ec2.describe_regions()['Regions']

              # Reading Default Values from the stack outputs
              customTagName = outputs['CustomTagName']
              customTagLen = len(customTagName)
              defaultStartTime = outputs['DefaultStartTime']
              defaultStopTime = outputs['DefaultStopTime']
              defaultTimeZone = 'utc'
              defaultDaysActive = outputs['DefaultDaysActive']
              createMetrics = outputs['CloudWatchMetrics'].lower()
              TimeNow = datetime.datetime.utcnow().isoformat()
              TimeStamp = str(TimeNow)

              # Declare Dicts
              regionDict = {}
              allRegionDict = {}
              regionsLabelDict = {}
              postDict = {}

              for region in awsRegions:
                  try:
                      # Create connection to the EC2 using Boto3 resources interface
                      ec2 = boto3.resource('ec2', region_name=region['RegionName'])

                      awsregion = region['RegionName']
                      now = datetime.datetime.now().strftime("%H%M")
                      nowMax = datetime.datetime.now() - datetime.timedelta(minutes=59)
                      nowMax = nowMax.strftime("%H%M")
                      nowDay = datetime.datetime.today().strftime("%a").lower()

                      # Declare Lists
                      startList = []
                      stopList = []
                      runningStateList = []
                      stoppedStateList = []

                      # List all instances
                      instances = ec2.instances.all()

                      print "Creating", region['RegionName'], "instance lists..."

                      for i in instances:
                          if i.tags != None:
                              for t in i.tags:
                                  if t['Key'][:customTagLen] == customTagName:

                                      ptag = t['Value'].split(";")

                                      # Split out Tag & Set Variables to default
                                      default1 = 'default'
                                      default2 = 'true'
                                      startTime = defaultStartTime
                                      stopTime = defaultStopTime
                                      timeZone = defaultTimeZone
                                      daysActive = defaultDaysActive
                                      state = i.state['Name']
                                      itype = i.instance_type

                                      # Post current state of the instances
                                      if createMetrics == 'enabled':
                                          if state == "running":
                                              putCloudWatchMetric(region['RegionName'], i.instance_id, 1)
                                          if state == "stopped":
                                              putCloudWatchMetric(region['RegionName'], i.instance_id, 0)

                                      # Parse tag-value
                                      if len(ptag) >= 1:
                                          if ptag[0].lower() in (default1, default2):
                                              startTime = defaultStartTime
                                          else:
                                              startTime = ptag[0]
                                              stopTime = ptag[0]
                                      if len(ptag) >= 2:
                                          stopTime = ptag[1]
                                      if len(ptag) >= 3:
                                          timeZone = ptag[2].lower()
                                      if len(ptag) >= 4:
                                          daysActive = ptag[3].lower()

                                      isActiveDay = False

                                      # Days Interpreter
                                      if daysActive == "all":
                                          isActiveDay = True
                                      elif daysActive == "weekdays":
                                          weekdays = ['mon', 'tue', 'wed', 'thu', 'fri']
                                          if (nowDay in weekdays):
                                              isActiveDay = True
                                      else:
                                          daysActive = daysActive.split(",")
                                          for d in daysActive:
                                              if d.lower() == nowDay:
                                                  isActiveDay = True

                                      # Append to start list
                                      if startTime >= str(nowMax) and startTime <= str(now) and \
                                              isActiveDay == True and state == "stopped":
                                          startList.append(i.instance_id)
                                          print i.instance_id, " added to START list"
                                          if createMetrics == 'enabled':
                                              putCloudWatchMetric(region['RegionName'], i.instance_id, 1)

                                      # Append to stop list
                                      if stopTime >= str(nowMax) and stopTime <= str(now) and \
                                              isActiveDay == True and state == "running":
                                          stopList.append(i.instance_id)
                                          print i.instance_id, " added to STOP list"
                                          if createMetrics == 'enabled':
                                              putCloudWatchMetric(region['RegionName'], i.instance_id, 0)

                                      if state == 'running':
                                          runningStateList.append(itype)
                                      if state == 'stopped':
                                          stoppedStateList.append(itype)

                      # Execute Start and Stop Commands
                      if startList:
                          print "Starting", len(startList), "instances", startList
                          ec2.instances.filter(InstanceIds=startList).start()
                      else:
                          print "No Instances to Start"

                      if stopList:
                          print "Stopping", len(stopList) ,"instances", stopList
                          ec2.instances.filter(InstanceIds=stopList).stop()
                      else:
                          print "No Instances to Stop"

                  except Exception as e:
                      print ("Exception: "+str(e))
                      continue

  ec2SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal: {Service: lambda.amazonaws.com}
      Path: /
      Policies:
        - PolicyName: ec2SchedulerPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents'
                Effect: Allow
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*
              - Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeInstances
                  - cloudwatch:PutMetricData
                  - cloudformation:DescribeStacks
                Effect: Allow
                Resource: '*'

Outputs:
  CloudWatchMetrics:
    Description: Create CloudWatch Custom Metric
    Value: !Ref CloudWatchMetrics
  CustomTagName:
    Description: Custom Tag Name
    Value: !Ref CustomTagName
  DefaultDaysActive:
    Description: Enter 'all', 'weekdays', or any combination of days ('mon', 'tue', 'wed', 'thu', 'fri', 'sat', or 'sun') comma separated
    Value: !Ref DefaultDaysActive
  DefaultStartTime:
    Description: Default Start Time (UTC, 24-hour format)
    Value: !Ref DefaultStartTime
  DefaultStopTime:
    Description: Default Start Time (UTC, 24-hour format)
    Value: !Ref DefaultStopTime
